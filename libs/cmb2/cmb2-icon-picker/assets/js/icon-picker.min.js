/*!
 * .pos() plugin based on jQuery UI Position 1.10.4, renamed to avoid
 * problems with jQuery native .position(), and added some triggers when position
 * collapses
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/position/
 */
(function($, win) {

    var defaults = {
        title: "AI Icon Picker",
        hideOnSelect: false,
        iconSets: []
    };

    var IconPicker = function( options ) {

        this.widget = $('body');

        this.config = $.extend( {}, defaults, options );

        this.init();

    }

    IconPicker.prototype.init = function() {

        var that = this;
        this.generateTemplate();

    }

    IconPicker.prototype.show = function( $field ) {
        this.pickerBox = $field;
        this.detectIcon();
        this.template.addClass('ai-show');
    }

    IconPicker.prototype.detectIcon = function() {
        var iconVal = this.pickerBox.val();
        this.template.find('.ai-icons li').removeClass('active').find('i').each(function(){
            if ( $(this).attr('class') == iconVal ) {
                $(this).parent().addClass('active');
            }
        });
    }

    IconPicker.prototype.hide = function(e) {

        if ( e ) {
            e.preventDefault();
        }

        this.template.removeClass('ai-show');
    }

    IconPicker.prototype.insert = function( iconObj ) {
        this.pickerBox.val( iconObj.icon );
    }

    IconPicker.prototype.templateIsExist = function() {
        return ( $('#ai-icon-picker').length > 0 ) ? true : false;
    }

    IconPicker.prototype.generateTemplate = function() {

        var that = this, html = "";
            
        html+= "<div id='ai-icon-picker' class='ai-icon-picker-wrapper'>";
            html+= "<div class='ai-icon-picker-backdrop'></div>";
            html+= "<div class='ai-icon-picker-outer-container'>";
                html+= "<div class='ai-icon-picker-info-container'>";
                    html+= "<h2 class='ai-icon-picker-title'>"+ this.config.title +"</h2>";
                    html+= "<button type='button' class='notice-dismiss ai-icon-picker-close'></button>";
                html+= "</div>";
                html+= "<div class='ai-icon-picker-container'>";
                    html+= "<div class='ai-icon-picker-tab-n-search-container'>";
                    html+= "</div>";
                    html+= "<div class='ai-icon-picker-icons-container'>";
                    html+= "</div>";
                html+= "</div>";
            html+= "</div>";
        html+= "</div>";
        
        this.template = $(html);

        if ( this.config.iconSets.length > 0 ) {

            this.template.find('.ai-icon-picker-tab-n-search-container').html("<ul class='ai-icon-tab-items'></ul>");

            this.template.find('.ai-icon-picker-tab-n-search-container').append("<div class='ai-icon-search-wrapper'><input type='text' id='ai-icon-search' class='ai-icon-search-input' ></div>");

            this.template.find('.ai-icon-tab-items').append( "<li class='active' id='all-ai-icons' title='All Icons' >All</li>" );

            this.config.iconSets.forEach(function( item, index ){

                that.template.find('.ai-icon-tab-items').append( "<li id='"+ item.id +"' title='"+ item.title +"' >"+ item.name +"</li>" );
                that.template.find('.ai-icon-picker-icons-container').append("<div id='"+  item.id +"-set' class='active ai-icon-sets'><ul class='ai-icons'></ul></div>");

                if ( item.icons ) {

                    item.icons.forEach(function(icon) {
                        var iconClass = ( item.base_class ) ? item.base_class +" "+ icon : icon;
                        that.template.find( 'ul.ai-icons:last' ).append( "<li><i class='"+ iconClass +"'></i></li>" );
                    });

                }

            });
            
        }

        this.template.find('.ai-icon-tab-items li').on('click', function(){

            var tab_id = $(this).attr('id');

            $(this).addClass('active').siblings().removeClass('active');

            if ( tab_id == 'all-ai-icons' ) {
                that.template.find( '.ai-icon-sets' ).addClass('active');
            } else {
                that.template.find( '#'+tab_id+'-set' ).addClass('active').siblings().removeClass('active');
            }

        });

        this.template.find('#ai-icon-search').on('keyup', function(e){

            var searchVal = $(this).val().trim();

            if ( searchVal ) {

                that.template.find('.ai-icon-sets .ai-icons').find('li').each(function(){
                    ( $(this).find('i').attr('class').search( searchVal ) == -1 ) ? $(this).css('display', 'none') : $(this).css('display', 'inline-block');
                });

            } else {
                that.template.find('.ai-icon-sets .ai-icons li').css('display', 'inline-block');
            }

        });

        this.template.find('.ai-icons li').on('click', function(){

            that.template.find('.ai-icons li').removeClass('active');
            $(this).addClass('active');

            that.insert({
                icon: $(this).find('i').attr('class')
            });

            if ( that.config.hideOnSelect ) {
                that.hide();
            }

        });

        this.template.find('.ai-icon-picker-close').on('click', function(e) {

            that.hide(e);

        });

        this.template.find('.ai-icon-picker-backdrop').on('click', function(){
            
            that.hide();

        });

        this.widget.append( this.template );
    }

    win.IconPicker = IconPicker;

}(jQuery, window));